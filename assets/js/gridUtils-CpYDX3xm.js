import{u as e,A as t}from"./index-Brc5gCI7.js";const{t:a}=t.global,r=({gridView:e})=>{const t=e.getColumns(),a={};return t.forEach(e=>{e.fieldName&&e.defaultValue&&(a[e.fieldName]=e.defaultValue)}),a},d=({gridView:e={},itemIndex:t=-1,data:a={}})=>{e.beginInsertRow(t,!1,a),e.commit(!0),setTimeout(()=>{e.showEditor()},10)},o=({gridView:e={},data:t={}})=>{e.beginAppendRow(t),e.commit(!0),setTimeout(()=>{e.showEditor()},10)},i=({dataProvider:e={},dataRow:t=null,data:a={}})=>{e.addChildRow(t,a,-1,!1)},n=({type:e="grid",gridView:t={},dataProvider:a={},checkedItems:r=[]})=>{if("tree"===e){const e=new Set;for(const o of r){const r=t.getDataRow(o);if(r>=0){e.add(r);(a.getDescendants?.(r)||[]).forEach(t=>e.add(t))}}const d=Array.from(e).sort((e,t)=>t-e);for(const t of d)a.removeRow(t)}else a.removeRows(r);t.resetCheckables(),t.checkAll(!1)},s=({gridView:e={},dataRow:t=-1})=>e.getItemIndex(t),l=({gridView:e={}})=>e.getCheckedItems(),g=({gridView:e={}})=>e.getCurrent(),c=({gridView:e={},itemIndex:t=-1,fieldName:a=""})=>{e.setCurrent({itemIndex:t,fieldName:a}),e.setFocus()},w=({dataProvider:e={},dataRow:t=-1})=>e.getJsonRow(t,!0),m=({type:e="grid",dataProvider:t={}})=>"grid"===e?t.getJsonRows(0,-1,!0):t.getJsonRows(null,!0,"","",!0),u=({type:e="grid",dataProvider:t={}})=>{if("grid"===e)return t.getAllStateRows();{const a=m({type:e,dataProvider:t});return h(a)}},h=e=>{const t={created:[],updated:[],deleted:[],createdAndDeleted:[]};return function e(a){if(!a)return;if(Array.isArray(a))return void a.forEach(e);const r=a,d=r.__rowState,o=r.__rowId;["created","updated","deleted"].includes(d)&&t[d].push(o),Array.isArray(r.rows)&&e(r.rows)}(e),t},p=({type:e="grid",dataProvider:t={}})=>{const a=u({type:e,dataProvider:t}),r=[];let d=0;Object.keys(a).forEach(o=>{a[o].forEach(a=>{d++;const o=w({dataProvider:t,dataRow:a});if("tree"===e){const e=(({dataProvider:e={},dataRow:t=-1,idField:a="menuId"})=>{const r=e.getParent?.(t);return"number"==typeof r&&r>=0?e.getValue(r,a)??null:null})({dataProvider:t,dataRow:a,idField:"menuId"});r.push({...o,parentId:e,__dataRow:a})}else r.push({...o,__dataRow:a})})});const o=t.getRowCount();return{...a,rowData:r,totalCnt:o,changeCnt:d}},f=({gridView:e={}})=>(R({gridView:e}),e.validateCells(null,!1)),R=({gridView:e={}})=>{e.clearInvalidCells()},v={addData:({gridView:e={},dataProvider:t={},data:a={}})=>{const i=g({gridView:e}),n=Object.assign(r({gridView:e}),a);i.itemIndex>-1?d({gridView:e,itemIndex:i.itemIndex+1,data:n}):o({gridView:e,data:n})},copyData:({gridView:t={},dataProvider:r={}})=>{const d=l({gridView:t});if(0===d.length)return void e.alert("",a("common.grid.msg.alert.noChecked"));const o=v.getColumns({gridView:t}).filter(e=>!e?.tag?.primaryKey&&!!e?.name).map(e=>e.name);e.orderBy(d,[],["desc"]).forEach(a=>{const d=t.getValues(a);let i={};o.forEach(t=>{i=e.assign(i,{[t]:d[t]})}),r.insertRow(a+1,i)}),t.resetCheckables(),t.checkAll(!1)},removeData:({type:t="grid",gridView:r={},dataProvider:d={}})=>{const o=l({gridView:r});0!==o.length?n({type:t,gridView:r,dataProvider:d,checkedItems:o}):e.alert("",a("common.grid.msg.alert.noChecked"))},saveData:async({type:t="grid",gridView:r={},dataProvider:d={}})=>{const o=p({type:t,dataProvider:d});let i="";o.created.length>0&&(i+=`${a("common.grid.addCnt",{count:o.created.length})}<br />`),o.updated.length>0&&(i+=`${a("common.grid.editCnt",{count:o.updated.length})}<br />`),o.deleted.length>0&&(i+=`${a("common.grid.delCnt",{count:o.deleted.length})}<br />`),i+=`<br />${a("common.grid.msg.confirm.save")}`;return{isConfirmed:(await e.confirm("",i)).isConfirmed,data:o.rowData}},beginInsertRow:d,beginAppendRow:o,addTreeData:({gridView:e={},dataProvider:t={},data:a={}})=>{const d=Object.assign(r({gridView:e}),a);i({dataProvider:t,data:d})},addTreeSubData:({gridView:t={},dataProvider:d={},data:o={}})=>{const n=g({gridView:t}),s=Object.assign(r({gridView:t}),o);if(n.itemIndex>-1){if("deleted"===d.getRowState(n.dataRow))return void e.alert("",a("common.grid.msg.alert.addChildToDeleted"));i({dataProvider:d,dataRow:n.dataRow,data:s}),t.commit(),t.expand(n.itemIndex,!1)}else i({dataProvider:d,data:s});t.resetCheckables(),t.checkAll(!1)},removeRows:n,checkValidation:async({gridView:t={},dataProvider:r={}})=>{const d=p({dataProvider:r});if(0===d.totalCnt)return await e.toastError("",a("common.grid.msg.alert.noSearchResult")),!1;if(0===d.changeCnt)return await e.toastError("",a("common.grid.msg.alert.noChangedData")),!1;const o=f({gridView:t});if(null!==o&&o.length>0){const{dataRow:a,fieldName:r,message:d}=o[0],i=s({gridView:t,dataRow:a});return e.alert("",d).then(()=>{c({gridView:t,itemIndex:i,fieldName:r})}),!1}return!0},transformToRowsTree:e=>{const t=new Map(e.map(e=>[e.menuId,{...e,rows:[],parentMenuId:[]}])),a=[];t.forEach(e=>{const{parentId:r}=e;if(r&&t.has(r)){const a=t.get(r);a.rows.push(e),e.parentMenuId=[...a.parentMenuId,a.menuId,e.menuId]}else a.push(e),e.parentMenuId=[];delete e.parentId});const r=(e,t)=>(+e.sort||0)-(+t.sort||0),d=e=>{e.sort(r),e.forEach(e=>d(e.rows))};return d(a),{rows:a}},setData:({type:e="grid",gridView:t={},dataProvider:a={},data:r=[]})=>{"tree"===e?(a.setObjectRows(r,"rows","",""),t.expandAll()):a.setRows(r),t.clearCurrent(),t.clearSelection()},updateRow:({gridView:e,dataProvider:t={},dataRow:a=-1,updateRow:r})=>{t.updateRow(a,r),e.commit(!0),e.validateCells(null,!1)},addRow:({dataProvider:e={},row:t={}})=>{e.addRow(t)},addRows:({dataProvider:e={},rows:t=[]})=>{e.addRows(t)},getColumns:({gridView:e={},mode:t="ALL"})=>"ALL"===t?e.getColumns():e.getDisplayColumns(),setLookupData:async({gridView:e={},field:t="",data:r=[]})=>{const d=r.map(e=>({...e,label:a(e.label)}));await e.setColumnProperty(t,"lookupData",d),e.refresh()},getItemIndex:s,getCheckedItems:l,getCheckedRowsInfo:({gridView:t={},dataProvider:r={}})=>{const d=t.getCheckedRows();if(0!==d.length){return d.map(e=>r.getJsonRow(e))}e.alert("",a("common.grid.msg.alert.noChecked"))},getCurrent:g,setCurrent:c,getJsonRow:w,getJsonRows:m,getStateRows:({dataProvider:e={},state:t=""})=>e.getStateRows(t),isChangeRowData:async(t=[],r="isChangeRowData")=>{let d=0;if(t.forEach(t=>{const a=u({type:e.has(t,"type")?"":t.type,dataProvider:t.dataProvider});d+=(e=>Object.values(e).reduce((e,t)=>e+t.length,0))(a)}),d>0){return(await e.confirm("",a(`common.grid.msg.alert.${r}`))).isConfirmed}return!0},getAllStateRows:u,getResultData:p,validateCells:f,clearInvalidCells:R};export{v as g};
