import{b as e,c as t,k as d,d as i,n as o,v as a,e as r,t as n,w as l,F as g,x as s,h as p,u as C,r as u,i as c,o as m,y as h,s as w,z as v}from"./index-Brc5gCI7.js";import{c as R,d as k,p as y,P as S,M as P,A as f}from"./real-grid-D0HQpUC9.js";import{g as I}from"./gridUtils-CpYDX3xm.js";import{P as b}from"./popup-container-CgYeCOO4.js";const E={__name:"tree-grid",props:{gridTitle:{type:String,default:""},gridConfig:{type:Object,default:()=>({})},isEditable:{type:Boolean,default:!0},gridAddClick:{type:Function,required:!1}},emits:["gridInit","gridCellButtonClicked","gridCellClicked","gridCellDblClicked","gridCellEdited","gridCellItemClicked","gridCellPasting","gridColumnCheckedChanged","gridColumnPropertyChanged","gridCommandStackChanged","gridContextMenuItemClicked","gridContextMenuPopup","gridCopy","gridCurrentChanged","gridCurrentChanging","gridCurrentRowChanged","gridCut","gridDataLoadComplated","gridEditCanceled","gridEditChange","gridEditCommit","gridEditRowChanged","gridEditRowPasted","gridEditSearch","gridErrorClicked","gridFiltering","gridFilteringChanged","gridGetEditValue","gridGridActivated","gridHideEditor","gridItemAllChecked","gridItemChecked","gridItemEditCancel","gridItemEditCanceled","gridItemsChecked","gridKeyDown","gridKeypress","gridKeyUp","gridLayoutCollapsed","gridLayoutCollapsing","gridLayoutExpanded","gridLayoutExpanding","gridLayoutPropertyChanged","gridLeftPosChanged","gridMenuItemClicked","gridPaste","gridPasted","gridRowInserting","gridRowsDeleting","gridRowsPasted","gridScrollToBottom","gridSearchCellButtonClick","gridSelectionChanged","gridSelectionCleared","gridShowEditor","gridShowHeaderTooltip","gridShowTooltip","gridSorting","gridSortingChanged","gridTopIndexChanged","gridValidateColumn","gridValidateRow","gridValidationFail","gridCellStyleCallback","gridItemChanged","gridItemCollapsed","gridItemCollapsing","gridItemExpanded","gridItemExpanding","providerDataChanged","providerRowAdded","providerRowAdding","providerRowCountChanged","providerRowDeleted","providerRowDeleting","providerRowParentChanged","providerRowParentChanging","providerRowsAdded","providerRowsDeleted","providerRowSiblingMoved","providerRowSiblingMoving","providerRowsSiblingMoved","providerRowsSiblingMoving","providerRowStateChanged","providerRowStatesChanged","providerRowsUpdated","providerRowsUpdating","providerRowUpdated","providerRowUpdating","providerValueChanged"],setup(e,{expose:t,emit:d}){t(),s.extend(R);const{t:i}=p(),o=e,a=d,r=`${o.gridConfig.gridId}-${C.generateUuid()}`,n=u({totalCount:0,getStateData:{created:[],updated:[],deleted:[]},popupStates:{isProgramPopup:!1,isMessagesPopup:!1},popupDataRowInfo:null}),{totalCount:l,getStateData:g,popupStates:E,popupDataRowInfo:D}=c(n);let x=null,M=null,F=Object.assign(C.cloneDeep(k.setting),C.cloneDeep(o.gridConfig.setting));m(()=>{M=new h.LocalTreeDataProvider(!0),x=new h.TreeView(r),x.setDataSource(M);const e=C.flattenDeep(o.gridConfig.columns),t=e.filter(e=>!C.has(e,"objectKey")).map(e=>{let t={fieldName:C.has(e,"fieldName")?e.fieldName:e.name,dataType:e.dataType};return["datetime"].includes(e.dataType)?t.datetimeFormat=e.datetimeFormat:C.has(e,"renderer")&&C.has(e.renderer,"type")&&["check"].includes(e.renderer.type)&&(t.booleanFormat="False,false,N,0:True,true,Y,1:0"),t});if(C.has(o.gridConfig,"addFields")&&o.gridConfig.addFields.forEach(e=>{t.push(e)}),x.sortMode="explicit",x.filterMode="explicit",M.setFields(t),x.setColumns(e),C.has(o.gridConfig,"layout")){const e=C.flattenDeep(o.gridConfig.layout);x.setColumnLayout(e)}M.restoreMode="auto",M.softDeleting=!0,M.deleteCreated=!0,x.hideDeletedRows=!1,x.setHeader({height:F.headerHeight}),x.setFooter({visible:F.footerVisible,height:F.footerHeight}),x.setCheckBar({visible:F.checkBarVisible,showAll:F.checkBarShowAll,syncHeadCheck:F.syncHeadCheck,exclusive:F.exclusive}),x.setRowIndicator({visible:F.rowIndicatorVisible}),x.setStateBar({visible:F.stateBar}),x.setDisplayOptions({fitStyle:F.fitStyle,emptyMessage:F.emptyMessage,rowHeight:F.rowHeight,rowResizable:F.rowResizable,eachRowResizable:F.eachRowResizable,columnMovable:F.columnMovable,showChangeMarker:F.showChangeMarker,useFocusClass:F.useFocusClass}),x.setEditOptions({editable:F.editable,insertable:F.insertable,appendable:F.appendable,commitByCell:F.commitByCell,commitWhenLeave:F.commitWhenLeave,crossWhenExitLast:F.crossWhenExitLast,exceptDataClickWhenButton:F.exceptDataClickWhenButton,validateOnEdited:F.validateOnEdited,validateOnExit:F.validateOnExit,enterToTab:F.enterToTab,commitLevel:F.commitLevel}),x.setFixedOptions({exceptFromSorting:F.exceptFromSorting,colCount:F.colCount}),x.setCopyOptions({lookupDisplay:F.lookupDisplay,convertLookupLabel:F.convertLookupLabel}),x.setPasteOptions({selectBlockPaste:F.selectBlockPaste,checkDomainOnly:F.checkDomainOnly,checkReadOnly:F.checkReadOnly,numberChars:F.numberChars,applyInputChars:F.applyInputChars,eventEachRow:F.eventEachRow}),x.onCellButtonClicked=(e,t,d)=>{a("gridCellButtonClicked",e,t,d)},x.onCellClicked=(e,t)=>{"gridEmpty"!==t.cellType&&a("gridCellClicked",e,t)},x.onCellDblClicked=(e,t)=>{a("gridCellDblClicked",e,t)},x.onCellEdited=(e,t,d,i)=>{a("gridCellEdited",e,t,d,i)},x.onCellItemClicked=(e,t,d)=>{if("link"===d.type&&"javascript:;"===d.url)return!1;if("button"===d.type&&"btnDel"===d.btnId){const e=d.itemIndex;e>-1&&(x.setValue(e,d.fieldName,""),Array.isArray(d.refFields)&&d.refFields.forEach(t=>{x.setValue(e,t,"")}))}"button"===d.type&&"btnSearch"===d.btnId&&(E.value[`is${d.popupId}`]=!0,"MessagesPopup"===d.target.popupId?D.value=Object.assign(d,{nameFields:d.target.nameFields.length>0?d.target.nameFields[0]:d.target.nameFields,refFields:d.target.refFields.length>0?d.target.refFields[0]:d.target.refFields}):D.value=d),a("gridCellItemClicked",e,t,d)},x.onCellPasting=(e,t,d)=>{a("gridCellPasting",e,t,d)},x.onColumnCheckedChanged=(e,t,d)=>{a("gridColumnCheckedChanged",e,t,d)},x.onColumnPropertyChanged=(e,t,d,i,o)=>{a("gridColumnPropertyChanged",e,t,d,i,o)},x.onCommandStackChanged=(e,t,d)=>{a("gridCommandStackChanged",e,t,d)},x.onContextMenuItemClicked=(e,t,d)=>{a("gridContextMenuItemClicked",e,t,d)},x.onContextMenuPopup=(e,t,d,i,o,r)=>{a("gridContextMenuPopup",e,t,d,i,o,r)},x.onCopy=(e,t,d)=>{a("gridCopy",e,t,d)},x.onCurrentChanged=(e,t)=>{a("gridCurrentChanged",e,t)},x.onCurrentChanging=(e,t,d)=>{a("gridCurrentChanging",e,t,d)},x.onCurrentRowChanged=(e,t,d)=>{a("gridCurrentRowChanged",e,t,d)},x.onCut=(e,t,d)=>{a("gridCut",e,t,d)},x.onDataLoadComplated=e=>{a("gridDataLoadComplated",e)},x.onEditCanceled=(e,t)=>{a("gridEditCanceled",e,t)},x.onEditChange=(e,t,d)=>{a("gridEditChange",e,t,d)},x.onEditCommit=(e,t,d,i)=>{a("gridEditCommit",e,t,d,i)},x.onEditRowChanged=(e,t,d,i,o,r)=>{a("gridEditRowChanged",e,t,d,i,o,r)},x.onEditRowPasted=(e,t,d,i,o,r)=>{a("gridEditRowPasted",e,t,d,i,o,r)},x.onEditSearch=(e,t,d)=>{a("gridEditSearch",e,t,d)},x.onErrorClicked=(e,t)=>{a("gridErrorClicked",e,t)},x.onFiltering=(e,t)=>{a("gridFiltering",e,t)},x.onFilteringChanged=(e,t,d)=>{a("gridFilteringChanged",e,t,d)},x.onGetEditValue=(e,t,d)=>{const i=e.columnByName(t.fieldName);if(i.editor&&["date"].includes(i.editor.type)&&i.datetimeFormat){const o=s(d.text,i.datetimeFormat.toUpperCase(),!0).isValid();e.commit(),o?M.setValue(t.dataRow,t.fieldIndex,d.text):M.setValue(t.dataRow,t.fieldIndex,"")}a("gridGetEditValue",e,t,d)},x.onGridActivated=e=>{a("gridGridActivated",e)},x.onHideEditor=(e,t)=>{a("gridHideEditor",e,t)},x.onItemAllChecked=(e,t)=>{a("gridItemAllChecked",e,t)},x.onItemChecked=(e,t,d)=>{const i=(e,t,d)=>{const o=e.getDataSource(),a=o.getParent(t),r=-1===a?o.getChildren():o.getChildren(a),n=r.indexOf(t);if(-1!==n&&r.splice(n,1),d)for(const i in r){if(d!==e.isCheckedRow(r[i])){d=!1;break}}else d=!1;a>-1&&e.checkRow(a,d,!1,!1),-1===a&&e.setAllCheck(d,!1),a>-1&&i(e,a,d)},o=e.getDataRow(t);((e,t,d)=>{const o=e.getDataSource();i(e,t,d);const a=o.getDescendants(t);a&&e.checkRows(a,d,!1)})(e,o,d),a("gridItemChecked",e,t,d)},x.onItemEditCancel=(e,t,d)=>{a("gridItemEditCancel",e,t,d)},x.onItemEditCanceled=(e,t,d)=>{a("gridItemEditCanceled",e,t,d)},x.onItemsChecked=(e,t,d)=>{a("gridItemsChecked",e,t,d)},x.onKeyDown=(e,t)=>{a("gridKeyDown",e,t)},x.onKeyPress=(e,t)=>{a("gridKeypress",e,t)},x.onKeyUp=(e,t)=>{a("gridKeyUp",e,t)},x.onLayoutCollapsed=(e,t)=>{a("gridLayoutCollapsed",e,t)},x.onLayoutCollapsing=(e,t)=>{a("gridLayoutCollapsing",e,t)},x.onLayoutExpanded=(e,t)=>{a("gridLayoutExpanded",e,t)},x.onLayoutExpanding=(e,t)=>{a("gridLayoutExpanding",e,t)},x.onLayoutPropertyChanged=(e,t,d,i,o)=>{a("gridLayoutPropertyChanged",e,t,d,i,o)},x.onLeftPosChanged=(e,t)=>{a("gridLeftPosChanged",e,t)},x.onMenuItemClicked=(e,t,d)=>{a("gridMenuItemClicked",e,t,d)},x.onPaste=(e,t,d)=>{a("gridPaste",e,t,d)},x.onPasted=e=>{a("gridPasted",e)},x.onRowInserting=(e,t,d)=>{a("gridRowInserting",e,t,d)},x.onRowsDeleting=(e,t)=>{a("gridRowsDeleting",e,t)},x.onRowsPasted=(e,t)=>{a("gridRowsPasted",e,t)},x.onScrollToBottom=e=>{a("gridScrollToBottom",e)},x.onSearchCellButtonClick=(e,t,d)=>{a("gridSearchCellButtonClick",e,t,d)},x.onSelectionChanged=e=>{a("gridSelectionChanged",e)},x.onSelectionCleared=e=>{a("gridSelectionCleared",e)},x.onShowEditor=(e,t,d,i)=>{a("gridShowEditor",e,t,d,i)},x.onShowHeaderTooltip=(e,t,d,i)=>{a("gridShowHeaderTooltip",e,t,d,i)},x.onShowTooltip=(e,t,d)=>{a("gridShowTooltip",e,t,d)},x.onSorting=e=>{a("gridSorting",e)},x.onSortingChanged=e=>{a("gridSortingChanged",e)},x.onTopIndexChanged=(e,t)=>{a("gridTopIndexChanged",e,t)},x.onValidateColumn=(e,t,d,i,o,r)=>{a("gridValidateColumn",e,t,d,i,o,r)},x.onValidateRow=(e,t,d,i,o)=>{a("gridValidateRow",e,t,d,i,o)},x.onValidationFail=(e,t,d,i)=>{a("gridValidationFail",e,t,d,i)},x.setCellStyleCallback(function(e,t){if(!F.isReadOnly){const d=t.dataColumn,i=d.tag||{},o=t.item?.rowState;let r=d.styleName||"",n=d.editable||!1;C.has(i,"isAddEditable")&&(n="created"===o);"boolean"!==d.valueType&&!1!==n||!0===i.readOnly||(r+=" realGrid-editable-cell");const l={styleName:r.trim(),editable:n};return a("gridCellStyleCallback",e,t,l),l}}),x.onTreeItemChanged=(e,t,d)=>{a("gridItemChanged",e,t,d)},x.onTreeItemCollapsed=(e,t,d)=>{a("gridItemCollapsed",e,t,d)},x.onTreeItemCollapsing=(e,t,d)=>{a("gridItemCollapsing",e,t,d)},x.onTreeItemExpanded=(e,t,d)=>{a("gridItemExpanded",e,t,d)},x.onTreeItemExpanding=(e,t,d)=>{a("gridItemExpanding",e,t,d)},M.onDataChanged=e=>{a("providerDataChanged",e)},M.onRowAdded=(e,t)=>{a("providerRowAdded",e,t)},M.onRowAdding=(e,t,d,i)=>{a("providerRowAdding",e,t,d,i)},M.onRowCountChanged=(e,t)=>{a("providerRowCountChanged",e,t)},M.onRowDeleted=(e,t)=>{a("providerRowDeleted",e,t)},M.onRowDeleting=(e,t)=>{a("providerRowDeleting",e,t)},M.onRowParentChanged=(e,t,d,i)=>{a("providerRowParentChanged",e,t,d,i)},M.onRowParentChanging=(e,t,d,i)=>{a("providerRowParentChanging",e,t,d,i)},M.onRowsAdded=(e,t,d)=>{a("providerRowsAdded",e,t,d)},M.onRowsDeleted=(e,t)=>{a("providerRowsDeleted",e,t)},M.onRowSiblingMoved=(e,t,d)=>{a("providerRowSiblingMoved",e,t,d)},M.onRowSiblingMoving=(e,t,d)=>{a("providerRowSiblingMoving",e,t,d)},M.onRowsSiblingMoved=(e,t,d)=>{a("providerRowsSiblingMoved",e,t,d)},M.onRowsSiblingMoving=(e,t,d)=>{a("providerRowsSiblingMoving",e,t,d)},M.onRowStateChanged=(e,t)=>{a("providerRowStateChanged",e,t)},M.onRowStatesChanged=(e,t)=>{a("providerRowStatesChanged",e,t)},M.onRowsUpdated=(e,t)=>{a("providerRowsUpdated",e,t)},M.onRowsUpdating=(e,t)=>{a("providerRowsUpdating",e,t)},M.onRowUpdated=(e,t)=>{a("providerRowUpdated",e,t)},M.onRowUpdating=(e,t,d,i)=>{a("providerRowUpdating",e,t,d,i)},M.onValueChanged=(e,t,d)=>{a("providerValueChanged",e,t,d)},x.registerCustomRenderer("popupLinkRenderer",y),a("gridInit",x,M)}),w(()=>{M.clearRows(),x.destroy(),M.destroy(),x=null,M=null});const V=async()=>{if("function"==typeof o?.gridAddClick){Promise.resolve(o.gridAddClick()).then(async e=>{!0!==await(e?.result)&&void 0!==e||I.addTreeData({gridView:x,data:e?.defaultData})})}else I.addTreeData({gridView:x,dataProvider:M})},T=async()=>{I.addTreeSubData({gridView:x,dataProvider:M})},B=()=>{I.removeData({type:"tree",gridView:x,dataProvider:M})},L=async()=>{a("gridSaveClick")},A={addClick:V,addSubChildClick:T,removeClick:B,saveClick:L},U={t:i,props:o,emit:a,gridUid:r,data:n,totalCount:l,getStateData:g,popupStates:E,popupDataRowInfo:D,get gridView(){return x},set gridView(e){x=e},get dataProvider(){return M},set dataProvider(e){M=e},get gridSetting(){return F},set gridSetting(e){F=e},authButtonClick:e=>{const t=A[e.buttonClick];"function"==typeof t&&t()},addClick:V,addSubChildClick:T,removeClick:B,saveClick:L,popupProgramBackHandler:e=>{I.updateRow({gridView:x,dataProvider:M,dataRow:D.value.dataRow,updateRow:e})},popupMessagesBackHandler:e=>{const t={[D.value.refFields]:e.langKey,[D.value.fieldName]:e.langNm};I.updateRow({gridView:x,dataProvider:M,dataRow:D.value.dataRow,updateRow:t})},handlers:A,onMounted:m,onUnmounted:w,reactive:u,toRefs:c,get useI18n(){return p},get dayjs(){return s},get customParseFormat(){return R},get RealGrid(){return h},get utils(){return C},ElementTooltip:v,get gridUtils(){return I},get popupLinkRenderer(){return y},AuthButtons:f,PopupContainer:b,MessagesSearchPopup:P,ProgramSearchPopup:S,get defaultConfig(){return k}};return Object.defineProperty(U,"__isScriptSetup",{enumerable:!1,value:!0}),U}},D={class:"grid_container"},x={class:"grid_btn_group"},M={class:"grid_title"},F={class:"grid_totalCnt"},V={class:"grid_totalCnt_tooltip"};const T=e(E,[["render",function(e,s,p,C,u,c){return d(),t(g,null,[i("div",D,[i("div",x,[i("div",null,[i("span",M,n(p.gridTitle),1),r(C.ElementTooltip,{isHover:!1,placement:"bottom-end"},{detailBody:l(()=>[i("div",V,[i("ul",null,[i("li",null,n(C.t("common.grid.addCnt",{count:C.getStateData.created.length})),1),i("li",null,n(C.t("common.grid.editCnt",{count:C.getStateData.updated.length})),1),i("li",null,n(C.t("common.grid.delCnt",{count:C.getStateData.deleted.length})),1)])])]),default:l(()=>[i("span",F,n(C.t("common.grid.totalCnt",{count:C.totalCount})),1)]),_:1}),p.isEditable?(d(),o(C.AuthButtons,{key:0,programId:p.gridConfig.programId,authId:p.gridConfig.gridId,authPosition:"left",onClick:C.authButtonClick},null,8,["programId","authId"])):a("",!0)]),i("div",null,[p.isEditable?(d(),o(C.AuthButtons,{key:0,programId:p.gridConfig.programId,authId:p.gridConfig.gridId,authPosition:"right",onClick:C.authButtonClick},null,8,["programId","authId"])):a("",!0)])]),(d(),t("div",{class:"grid_area",key:C.gridUid,id:C.gridUid}))]),C.popupStates.isProgramPopup?(d(),o(C.PopupContainer,{key:0,modelValue:C.popupStates.isProgramPopup,"onUpdate:modelValue":s[0]||(s[0]=e=>C.popupStates.isProgramPopup=e),title:C.t("ProgramSearchPopup.title")},{default:l(e=>[r(C.ProgramSearchPopup,{slotProps:e,onCallBackHandler:C.popupProgramBackHandler},null,8,["slotProps"])]),_:1},8,["modelValue","title"])):a("",!0),C.popupStates.isMessagesPopup?(d(),o(C.PopupContainer,{key:1,modelValue:C.popupStates.isMessagesPopup,"onUpdate:modelValue":s[1]||(s[1]=e=>C.popupStates.isMessagesPopup=e),title:C.t("MessagesSearchPopup.title")},{default:l(e=>[r(C.MessagesSearchPopup,{slotProps:e,onCallBackHandler:C.popupMessagesBackHandler},null,8,["slotProps"])]),_:1},8,["modelValue","title"])):a("",!0)],64)}],["__file","/Users/kokimin/WorkSpace/vue_design_system/src/components/grid/tree-grid.vue"]]);export{T};
